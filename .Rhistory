###### IS: cleaning attribute names ######
##########################################
source("blood_work_sccript_colname_cleaning.R")
colnames(data)
View(data)
###### IS: cleaning attribute names ######
##########################################
source("blood_work_sccript_colname_cleaning.R")
View(data)
colnames(data)
## drop the Conf. Interval columns
v_name = c(NULL)
i = 1
for(name in colnames(data)){
if(name!= "*CI*" ){ #name does not contains "CI"
v_name[i] <- name
}
v = v + 1
}
v_name = c(NULL)
i = 1
for(name in colnames(data)){
if(name!= "*CI*" ){ #name does not contains "CI"
v_name[i] <- name
}
i = i + 1
}
v_name
v_name = c(NULL)
i = 1
for(name in colnames(data)){
if(name != ".*CI*" ){ #name does not contains "CI"
v_name[i] <- name
}
i = i + 1
}
v_name
grep()
?grep()
grep("CI",colnames(data))
grep("CI",colnames(data),invert = T)
df <- data[grep("CI",colnames(data),invert = T)]
View(df)
## drop the Conf. Interval columns
df_blood <- data[grep("CI",colnames(data),invert = T)]
df_blood <- as.matrix(df_blood)
df_blood[4:,]
df_blood[4:]
df_blood[4:,]
df_blood
df_blood <- df_blood*.01
df_blood[1:4,]
df_blood[,1:4]
df_blood[,4:]
library('dplyr')
library(dplyr)
install.packages("dplyr")
(dplyr)
library(dplyr)
library(dplyr)
df_blood[,4:]
###### IS: cleaning column names ######
##########################################
source("blood_work_sccript_colname_cleaning.R")
colnames(data)
## make new data set with out the Confidence Interval columns
df_blood <- data[grep("CI",colnames(data),invert = T)]
###### IS: cleaning column names ######
##########################################
source("blood_work_sccript_colname_cleaning.R")
colnames(data)
## make new data set with out the Confidence Interval columns
df_blood <- data[grep("CI",colnames(data),invert = T)]
View(df_blood)
###### IS: cleaning column names ######
##########################################
source("blood_work_sccript_colname_cleaning.R")
colnames(data)
## make new data set with out the Confidence Interval columns
df_blood <- data[grep("CI",colnames(data),invert = T)]
library(dplyr)
View(df_blood)
shiny::runApp('shine')
parallel::detectCores()
